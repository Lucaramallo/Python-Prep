# (POO) Programación orientada a Objetos.

#Clases y Programación Orientada a Objetos


# 1 . Crear la clase vehículo que contenga los atributos:
#     .Color
#     .Si es moto, auto, camioneta ó camión
#     .Cilindrada del motor


class Vehiculo:
    def __init__(self, color, tipo, cilindrada):
        '''
        Clase destinada a todo tipo de Vehículo, utilizado para transportar o mover ya sea
        personas, como tambien mercadería, objetos físicos, volúmenes, etc. 
        de un punto a otro. 

        .   Parámetros / Argumentos:
            - Color : blanco, negro , azul.
            - Tipo : auto, moto, bicicleta, monopatin,
            - CC: Cilindrada
            - Velocidad: inicializado en 0
            - Direcion: inicializado en 0
        
    
        .   Funciones / Métodos:
            - Acelerar
            - Frenar
            - Doblar
            - Estad0o
            - Propiedades
        '''
        self.color = color
        self.tipo = tipo
        self.cilindrada = cilindrada
        self.velocidad = 0
        self.direccion = 0

    def Acelerar(self, vel):
        self.velocidad += vel

    def Frenar(self, vel):
        self.velocidad -= vel
    
    def Doblar(self, grados):
        self.direccion += grados

                # 4. Agregar a la clase Vehiculo, un método que muestre su estado, es decir, 
                #    a que velocidad se encuentra y su dirección. Y otro método que muestre color, tipo y cilindrada

    def estado(self, vel, direccion):
        return vel , direccion
    
    def propieties (self,color, tipo, cilindrada):
        return color, tipo, cilindrada


#Instanciar 3 objetos de la clase vehículo y ejecutar sus métodos, probar luego el resultado
a1 = Vehiculo('rojo',1,2)
a2 = Vehiculo('blanco', 'camioneta', 3.6)
a3 = Vehiculo('negro', 'moto', 1)

a1.Acelerar(40)
a2.Acelerar(60)
a3.Acelerar(30)
a1.Doblar(30)
a3.Doblar(-30)
a2.Frenar(-50)



#

class Herramientas:
    '''
     5. Crear una clase que permita utilizar las funciones creadas en la práctica del módulo 6
#    .Verificar Primo
#    .Valor modal
#    .Conversión grados
#    .Factorial

    
    '''
    def __init__(self) -> None:
        '''
        Funciones incorporadas:

            1.Verificar Primo
            2.Valor modal
            3.Conversión grados
            4.Factorial
        
        
        '''
        pass
 
    def verifica_primo(self,numero_analized):
        es_primo = True
        for iterador in range(2, numero_analized):
            if numero_analized % iterador == 0:
                es_primo = False
                break
        return(es_primo)
      
    def valor_modal(self,lista):                                        # 1. Define el nombre de la funcion                                                  # Declara 
        lista_ya_analizados_VM = []                                     # 2. Crea Listas vacias 
        lista_repeticiones_VM = []                                      
        
        if len(lista) == 0:                                             # 3. Verifica que las listas no estén vacias
            return None

        for elemento in lista:                                          # 4. Para ccuando el "elemento" aparezca en  "Lista":
            
            if elemento in lista_ya_analizados_VM:                      # 5. Si el elemento ya está en "lista_ya_analizados_VM":
                i = lista_ya_analizados_VM.index(elemento)              # 6. Crea "i" (simple iterador) y lo "iguala" a "al index del "elemento" dentro de la lista de "ya analizados".
                lista_repeticiones_VM[i] += 1                           # 7. Agrega un "+1" a la lista "Repeticiones" en el index correspondiente a "i", "i" cumple funcion de ser iterador, como mencionaba en el punto anterior.
            else:                                                       # 8. Plantea el caso que no se cumpla , Si el elemento ya está en "lista_ya_analizados_VM":
                lista_ya_analizados_VM.append(elemento)                 # 9. Adhiere a la lista de ya analizados el "elemento"-
                lista_repeticiones_VM.append(1)                         # 10. agrega un index mas con valor = 1 por ser la primer unidad en entrar a la lista ya analizados, con valor != de las anteriormente analizadas.    
        
        
            moda = lista_ya_analizados_VM[0]                            # A. Renombra Variables.
            maximo = lista_repeticiones_VM[0]
            
            
            for i, elemento in enumerate(lista_ya_analizados_VM):       # B. por cada iteracion "i" , cada vez que "elemento aparezca en "lista ya analizados", n la lista de los ya analizados, dale una numeracion index.
                
                if lista_repeticiones_VM[i] > maximo:                   # C. Si eliesimo valor de la lista "Repericiones  VM"   es mayor al resultado arrojado como Maximo.
                    moda = lista_ya_analizados_VM[i]                    # D. Pisa el valor guardado.
                    maximo = lista_repeticiones_VM[i]
            
            return moda, maximo                                        # E. Trae el resultado guadado por ultima vez en las variables "moda" y "maximo"

    def valor_modal2(self,lista, menor):                          # 1. define nueva formula para el valor con moda mas pequeña                    
        '''
        Esta función devuelve el valor modal y recibe de parámetros dos valores:
        1-Una lista de números
        2-Verdadero (por defecto) por si se requiere el mínimo de los más repetidos, o Falso si se requiere el máximo
        '''
        lista_ya_analizados_VM = []                         #llama a las listas creadas anteriormente
        lista_repeticiones_VM = []

        if len(lista) == 0:                                 # Valida entrada
            return None
        if (menor):                                         # si la variable "menor" posee valor = a "Verdadero".
            lista.sort()                                    # Ordene la lista de FORMA ACENDENTE A DESENDENTE . El método sort() nos permite ordenar una lista en orden ascendente o descendente. Recibe dos argumentos "solo nombrados": reverse y key . reverse determina si la lista será ordenada de forma ascendente o descendente.
        else:                                               # si v. "menor" posee valor  = a "false".
            lista.sort(reverse=True)                        # Ordene la lista de FORMA DECENDENTE A ACENDENTE.
        for elemento in lista:                              # Cada vez que aparezca "elemento" dentro de la lista hacer:  
            if elemento in lista_ya_analizados_VM:              #si el elemento analizado se encuentra ya en la lista "ya analizados"
                i = lista_ya_analizados_VM.index(elemento)      # define "i" como el index de la lista de los "ya analizados" que contiene a "elemento"
                lista_repeticiones_VM[i] += 1                   # suma + 1 al indice "lista repeticiones".
            else:                                               # Si el elemento analizado no se encuentra aun en la lista "ya analizadoa" hacer: 
                lista_ya_analizados_VM.append(elemento)         # agregar a "lista ya analizados" el "elemento".
                lista_repeticiones_VM.append(1)                 # sume +1 al indice del elemento recien agregado. registra esta primer aparicion del valor
        moda = lista_ya_analizados_VM[0]                    #llama a valor ultimo almacenado en variable moda.
        maximo = lista_repeticiones_VM[0]                   #llama a valor ultimo almacenado en variable maximo.
        for i, elemento in enumerate(lista_ya_analizados_VM):   #por cada iteracion, cada vez que aparezca el "elemento" en la lista de los ya analizados, dale una numeracion.
            if lista_repeticiones_VM[i] > maximo:                 # si el elemento dentro de la lista con index sub i es mayor al maximo  
                    moda = lista_ya_analizados_VM[i]                 # pise el dato de la moda y el maximo
                    maximo = lista_repeticiones_VM[i]                
            return moda, maximo                                  #traiga los valores moda y max

    def conversion_FKC(self,numero_analized,unidad_origen,unidad_destino):
        
        magnitud = int()
        numero_analized = int()
        unidad_origen = int()
        unidad_destino = int()
        kelvin = 'kelvin'
        celcius = 'celcius'
        farenheit = 'farenheit'

        
        if unidad_origen == celcius:

            if unidad_destino == kelvin:
                c_to_kelv = int(magnitud) + int(273.15)
                print(str(magnitud) + ' Grados celcius equivalen a: ' + str(c_to_kelv) + ' Grados Kelvin. ')
            
            if unidad_destino == farenheit:
                c_to_faren = (int(numero_analized) * 9/5) + int(32)
                print(str(magnitud) + ' Grados celcius equivalen a: ' + str(c_to_faren) + ' Grados Farenheit. ')
        
        #un poco mas allá de la consigna como ejercitacion:

        #SIN QUERER CUMPLI CON EL PUNTO SIGUIENTE:
        
    #6 Iterando una lista con los tres valores posibles de temperatura
    #  que recibe la función del punto 5,
    #  hacer un print para cada combinación de los mismos:

        elif unidad_origen == kelvin:
            
            if unidad_destino == celcius:
                kelv_to_cel = int(magnitud) - int(273.15)
                print(str(magnitud) + ' Grados Kelvin equivalen a: ' + str(kelv_to_cel) + ' Grados Celcius. ')

            if unidad_destino == farenheit:
                kelv_to_far = (((int(magnitud) - int(273.15)) * 9/5) +32)
                print(str(magnitud) + ' Grados Kelvin equivalen a: ' + str(kelv_to_far) + ' Grados Farenheit. ')
        
        elif unidad_origen == farenheit:

            if unidad_destino == celcius:
                farenh_to_cel = (int(magnitud) - 32) *5/9
                print(str(magnitud) + ' Grados Farenheit equivalen a: ' + str(farenh_to_cel) + ' Grados Celcius. ')
            
            if unidad_destino == kelvin:
                farenh_to_kel = ((int(magnitud) - 32) *5/9) + int(273.15)
                print(str(magnitud) + ' Grados Farenheit equivalen a: ' + str(farenh_to_kel) + ' Grados Kelvin. ')

        return('The end..')




# 6. Probar las funciones incorporadas en la clase del punto 5

# 7. Es necesario que la clase creada en el punto 5 contenga una lista, 
#    sobre la cual se aplquen las funciones incorporadas

# 8. Crear un archivo .py aparte y ubicar allí la clase generada en el punto anterior. 
#    Luego realizar la importación del módulo y probar alguna de sus funciones


aa5 = Herramientas()

print(aa5.conversion_FKC(7,'kelvin','farenheit'))


from herramientas import *

# Bueno,  hasta aqui sin error en los codigos, al parecer como en el desarrollo de los ejercicios anteriores agregue mas cosas,
#  como por ejemplo iinteraccion con la consola para definir rangos etc, los codigos si bien corrren, es decir, se ejecutan.. 
# porque si corre hasta el final "The end", si finaliza el camino.
# pero no escupen los resultados correctamente al final...

# A continuacion voy a pegar la resolucion del ejecticio segun link curso en README.
#porfavor los derechos a quien pertenecen, utlize su codigo como guia, llegar hasta aqui.

# En definitiva, el objetivo es insertar codigo de un tercero, 
# tambien lo pegue en el archivo anexo Herramientas y se podrá, 
# verificar que ahora si funciona perfecta la importacion del modulo y de la clase




class Herramientas:
    def __init__(self) -> None:
        pass

    def verifica_primo(self, nro):
        es_primo = True
        for i in range(2, nro):
            if nro % i == 0:
                es_primo = False
                break
        return es_primo

    def valor_modal(self, lista, menor):
        lista_unicos = []
        lista_repeticiones = []
        if len(lista) == 0:
            return None
        if (menor):
            lista.sort()
        else:
            lista.sort(reverse=True)
        for elemento in lista:
            if elemento in lista_unicos:
                i = lista_unicos.index(elemento)
                lista_repeticiones[i] += 1
            else:
                lista_unicos.append(elemento)
                lista_repeticiones.append(1)
        moda = lista_unicos[0]
        maximo = lista_repeticiones[0]
        for i, elemento in enumerate(lista_unicos):
            if lista_repeticiones[i] > maximo:
                moda = lista_unicos[i]
                maximo = lista_repeticiones[i]
        return moda, maximo

    def conversion_grados(self, valor, origen, destino):
        valor_destino = None
        if (origen == 'celsius'):
            if (destino == 'celsius'):
                valor_destino = valor
            elif (destino == 'farenheit'):
                valor_destino = (valor * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'farenheit'):
            if (destino == 'celsius'):
                valor_destino = (valor - 32) * 5 / 9
            elif (destino == 'farenheit'):
                valor_destino = valor
            elif (destino == 'kelvin'):
                valor_destino = ((valor - 32) * 5 / 9) + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'kelvin'):
            if (destino == 'celsius'):
                valor_destino = valor - 273.15
            elif (destino == 'farenheit'):
                valor_destino = ((valor - 273.15) * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor
            else:
                print('Parámetro de Destino incorrecto')
        else:
            print('Parámetro de Origen incorrecto')
        return valor_destino

    def factorial(self, numero):
        if(type(numero) != int):
            return 'El numero debe ser un entero'
        if(numero < 0):
            return 'El numero debe ser pisitivo'
        if (numero > 1):
            numero = numero * self.factorial(numero - 1)
        return numero


# In[34]:


h = Herramientas()


# 6) Probar las funciones incorporadas en la clase del punto 5

# In[28]:


h.verifica_primo(7)


# In[29]:


listado = [1,8,2,5,4,8,10,7]
moda, repe = h.valor_modal(listado, True)
print('El valor modal es', moda, 'y se reptie', repe, 'veces')


# In[31]:


h.conversion_grados(10, 'celsius', 'kelvin')


# In[35]:


h.factorial(6)


# 7) Es necesario que la clase creada en el punto 5 contenga una lista, sobre la cual se aplquen las funciones incorporadas

# In[55]:


class Herramientas:
    def __init__(self, lista_numeros):
        self.lista = lista_numeros

    def verifica_primo(self):
        for i in self.lista:
            if (self.__verifica_primo(i)):
                print('El elemento', i, 'SI es un numero primo')
            else:
                print('El elemento', i, 'NO es un numero primo')

    def conversion_grados(self, origen, destino):
        for i in self.lista:
            print(i, 'grados', origen, 'son', self.__conversion_grados(i, origen, destino),'grados',destino)
    
    def factorial(self):
        for i in self.lista:
            print('El factorial de ', i, 'es', self.__factorial(i))

    def __verifica_primo(self, nro):
        es_primo = True
        for i in range(2, nro):
            if nro % i == 0:
                es_primo = False
                break
        return es_primo

    def valor_modal(self, menor):
        lista_unicos = []
        lista_repeticiones = []
        if len(self.lista) == 0:
            return None
        if (menor):
            self.lista.sort()
        else:
            self.lista.sort(reverse=True)
        for elemento in self.lista:
            if elemento in lista_unicos:
                i = lista_unicos.index(elemento)
                lista_repeticiones[i] += 1
            else:
                lista_unicos.append(elemento)
                lista_repeticiones.append(1)
        moda = lista_unicos[0]
        maximo = lista_repeticiones[0]
        for i, elemento in enumerate(lista_unicos):
            if lista_repeticiones[i] > maximo:
                moda = lista_unicos[i]
                maximo = lista_repeticiones[i]
        return moda, maximo

    def __conversion_grados(self, valor, origen, destino):
        valor_destino = None
        if (origen == 'celsius'):
            if (destino == 'celsius'):
                valor_destino = valor
            elif (destino == 'farenheit'):
                valor_destino = (valor * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'farenheit'):
            if (destino == 'celsius'):
                valor_destino = (valor - 32) * 5 / 9
            elif (destino == 'farenheit'):
                valor_destino = valor
            elif (destino == 'kelvin'):
                valor_destino = ((valor - 32) * 5 / 9) + 273.15
            else:
                print('Parámetro de Destino incorrecto')
        elif (origen == 'kelvin'):
            if (destino == 'celsius'):
                valor_destino = valor - 273.15
            elif (destino == 'farenheit'):
                valor_destino = ((valor - 273.15) * 9 / 5) + 32
            elif (destino == 'kelvin'):
                valor_destino = valor
            else:
                print('Parámetro de Destino incorrecto')
        else:
            print('Parámetro de Origen incorrecto')
        return valor_destino

    def __factorial(self, numero):
        if(type(numero) != int):
            return 'El numero debe ser un entero'
        if(numero < 0):
            return 'El numero debe ser pisitivo'
        if (numero > 1):
            numero = numero * self.__factorial(numero - 1)
        return numero


# In[56]:


h = Herramientas([1,1,2,5,8,8,9,11,15,16,16,16,18,20])


# In[57]:


h.conversion_grados('celsius','farenheit')


# In[58]:


h.verifica_primo()


# In[59]:


moda, repe = h.valor_modal(False)
print('El valor modal es', moda, 'y se reptie', repe, 'veces')


# In[60]:


h.factorial()


# 8) Crear un archivo .py aparte y ubicar allí la clase generada en el punto anterior. Luego realizar la importación del módulo y probar alguna de sus funciones

# In[1]:


from herramientas import *


# In[2]:


h2 = Herramientas([1,1,2,3,5,6,8,8])


# In[3]:


h2.verifica_primo()












